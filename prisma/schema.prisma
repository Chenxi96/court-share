// schema.prisma

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("POSTGRES_PRISMA_URL") // uses connection pooling
  extensions = [postgis]
}

model Post {
  id           String                                @id @default(cuid())
  title        String
  location     Unsupported("geography(Point, 4326)")?
  owner        User                                  @relation(fields: [ownerId], references: [id])
  ownerId      String                                
  description  String
  availableSpots Int
  eventTime    DateTime
  createdAt    DateTime                              @default(now()) @map(name: "created_at")
  updatedAt    DateTime                              @updatedAt @map(name: "updated_at")
  attendees Attendees[]

  @@map(name: "posts")
}

model User {
  id           String         @id @default(cuid())
  name         String
  email        String         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  createdAt    DateTime       @default(now()) @map(name: "created_at")
  updatedAt    DateTime       @updatedAt @map(name: "updated_at")
  posts        Post[]
  attendees Attendees[]

  @@map(name: "users")
}

model Attendees {
  post     Post     @relation(fields: [postId], references: [id])
  postId   String
  user     User     @relation(fields: [userId], references: [id])
  userId   String
  joinedAt DateTime @default(now())

  @@id([postId, userId])
  @@map(name: "attendees")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}